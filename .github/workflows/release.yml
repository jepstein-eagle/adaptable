name: RELEASE

on:
  pull_request:
      branches:
        - master
  push:
    branches:
      - master
jobs:
  release:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [12.x]

    env:
      IPUSHPULL_API_SECRET: ${{ secrets.IPUSHPULL_API_SECRET }}
      IPUSHPULL_API_KEY: ${{ secrets.IPUSHPULL_API_KEY }}
    steps:
    - uses: actions/checkout@v1
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}

    - uses: "./.github/actions/will-release-check"

    - run: echo "@adaptabletools:registry=https://registry.adaptabletools.com" > .npmrc
    - run: echo "//registry.adaptabletools.com/:_authToken=${PRIVATE_NPM_REGISTRY_TOKEN}" >> .npmrc
      env:
        PRIVATE_NPM_REGISTRY_TOKEN: ${{ secrets.PRIVATE_NPM_REGISTRY_TOKEN }}
    - run: echo "//registry.npmjs.org/:_authToken=${PUBLIC_NPM_REGISTRY_TOKEN}" >> .npmrc
      env:
        PUBLIC_NPM_REGISTRY_TOKEN: ${{ secrets.PUBLIC_NPM_REGISTRY_TOKEN }}
    - run: echo "package-lock=false" >> .npmrc

    - name: Echo whoami for private registry
      run: npm whoami --registry=https://registry.adaptabletools.com
    - name: Echo whoami for public registry
      run: npm whoami

    - name: Echo publish cmd
      run: echo $WILL_RELEASE_CMD

    - name: Set git config
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "SHIP IT"

    - name: Bump version
      run: npm run bump:${WILL_RELEASE_VERSION}

    - name: Executing npm install in root
      run: npm i

    - name: Executing npm install in core
      run: cp .npmrc packages/adaptable && npm run install-core
      env:
        CI: true

    - name: Building core
      run: cd packages/adaptable && npm run build-prod-no-cleanup


    - name: Executing npm install in react
      run: npm run install-react
      env:
        CI: true

    - name: Building react
      run: cd packages/adaptable-react-aggrid && npm run build-prod-no-cleanup


    - name: Executing npm install in angular
      run: npm run install-angular
      env:
        CI: true

    - name: Building angular
      run: cd packages/adaptable-ng-aggrid && npm run build-prod-no-cleanup


    - name: Executing npm install in plugins/charts
      run: npm run install-plugins-charts
      env:
        CI: true

    - name: Building plugins-charts
      run: cd packages/plugins/charts && npm run build-prod-no-cleanup


    - name: Executing npm install in plugins/nocode-aggrid
      run: npm run install-plugins-nocode-aggrid
      env:
        CI: true

    - name: Building plugins-nocode-aggrid
      run: cd packages/plugins/nocode-aggrid && npm run build-prod-no-cleanup

    - name: Executing npm install in plugins/finance
      run: npm run install-plugins-finance
      env:
        CI: true

    - name: Building plugins-finance
      run: cd packages/plugins/finance && npm run build-prod-no-cleanup

    - name: Executing npm install in plugins/master-detail-aggrid
      run: npm run install-plugins-master-detail-aggrid
      env:
        CI: true

    - name: Building plugins-master-detail-aggrid
      run: cd packages/plugins/master-detail-aggrid && npm run build-prod-no-cleanup

    - name: Ship it
      uses: "./.github/actions/execute-cmd"
      with:
        cmd_to_execute: $WILL_RELEASE_CMD

    - run: git diff
    - run: cat package.json

    - name: Push changes
      uses: "./.github/actions/git-push-action"
      with:
        branch: master
        github_token: ${{ secrets.AB_DEPLOY_GITHUB_TOKEN }}

    - name: Send version to slack
      uses: "./.github/actions/send-version-to-slack"
      with:
        slack_webhook_notify: ${{ secrets.SLACK_WEBHOOK_NOTIFY }}
